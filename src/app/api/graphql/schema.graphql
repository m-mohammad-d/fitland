# ----- Enums -------
enum ProductSortField {
  price
  priceDesc
  discount
  discountDesc
  createdAt
  createdAtDesc
  stock
  stockDesc
}
enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  ONLINE
  ON_DELIVERY
  WALLET
}

enum DiscountType {
  AMOUNT
  PERCENT
}
enum TransactionType {
  DEPOSIT
  PAYMENT
}

enum ReactionType {
  LIKE
  DISLIKE
}

# ----- Types -------

type Color {
  name: String!
  hex: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  phone: String
  nationalCode: String
  gender: Gender
  photo: String
  role: Role!
  lastLogin: String
  createdAt: String!
  updatedAt: String!
  addresses: [Address!]!
  orders: [Order!]!
}

type Product {
  id: ID!
  name: String!
  description: String!
  price: Int!
  discountedPrice: Int
  stock: Int!
  category: Category!
  categoryId: String!
  images: [String!]!
  colors: [Color]
  sizes: [String!]!
  discountCode: String
  discount: Float
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
  orderItems: [OrderItem!]!
}

type Comment {
  id: ID!
  content: String!
  rating: Int!
  product: Product!
  user: User
  createdAt: String!
  userReactionType: ReactionType
  likes: Int!
  dislikes: Int!
}

type Category {
  id: ID!
  name: String!
  products: [Product!]!
}

type Order {
  id: ID!
  user: User
  userId: String!
  items: [OrderItem!]!
  discountCode: DiscountCode
  discountCodeId: String
  address: Address!
  addressId: String!
  deliveryDate: String!
  paymentMethod: PaymentMethod!
  shippingCost: Float!
  tax: Float!
  totalPrice: Float!
  status: OrderStatus!
  createdAt: String!
}

type OrderItem {
  id: ID!
  order: Order!
  orderId: String!
  product: Product!
  productId: String
  color: String
  size: String
  variantId: String
  quantity: Int!
  priceAtPurchase: Float!
}
type Reaction {
  id: ID
  type: ReactionType
  user: User
  comment: Comment
  createdAt: String
}

type DiscountCode {
  id: ID!
  code: String!
  type: DiscountType!
  value: Float!
  isActive: Boolean!
  orders: [Order!]!
}
type Transaction {
  id: String!
  walletId: String!
  amount: Float!
  transactionType: TransactionType!
  createdAt: String!
}

type DiscountResponse {
  success: Boolean!
  message: String!
  discountAmount: Float
  discountPercent: Float
  type: String
  code: String
}
# Sign Out Response Type
type SignOutResponse {
  success: Boolean!
}

type Wallet {
  id: String!
  userId: String!
  balance: Float!
  createdAt: String!
  updatedAt: String!
  transactions: [Transaction!]!
}
type Address {
  id: ID
  userId: String
  fullName: String
  phone: String
  fullAddress: String
  plaque: String
  unit: String
  zipCode: String
  details: String
  createdAt: String
  updatedAt: String
}
type ProductsResponse {
  items: [Product!]!
  totalCount: Int!
}

# ----- Inputs -------

input ProductFilter {
  minPrice: Int
  maxPrice: Int
  discount: Int
  category: [ID!]
  brand: [ID!]
  colors: [ID!]
  sizes: [String!]
  availableOnly: Boolean
  search: String
  minRating: Float
}

input OrderItemInput {
  productId: ID!
  color: String
  size: String
  quantity: Int!
  priceAtPurchase: Float!
}

input CreateOrderInput {
  items: [OrderItemInput!]!
  addressId: ID!
  discountCode: String
  deliveryDate: String!
  paymentMethod: PaymentMethod!
  shippingCost: Float!
  tax: Float!
  totalPrice: Float!
}

input AddAddressInput {
  fullName: String!
  phone: String!
  fullAddress: String!
  plaque: String!
  unit: String
  zipCode: String!
  details: String
}

# ----- Queries -------

type Query {
  products(sortBy: ProductSortField, filters: ProductFilter, page: Int, pageSize: Int): ProductsResponse!

  getMe: User!

  getAllOrders: [Order!]!
  getUserOrders: [Order!]!
  getOrderById(id: String): Order!
  getUserAddress: [Address!]!
  getUserWalletInfo: Wallet!
  getAddressById(id: String): Address
  product(id: ID!): Product
  getProductComments(id: ID!): [Comment]

  categories: [Category!]!
}

# ----- Mutations -------

type Mutation {
  addProduct(name: String!, description: String!, price: Int!, stock: Int!, categoryId: ID!, images: [String!]!, colors: [String!]!, sizes: [String!]!, discount: Float, discountCode: String): Product!

  signUp(name: String!, email: String!, password: String!): User!

  signIn(email: String!, password: String!): User!

  signOut: SignOutResponse!

  updateUser(id: String!, name: String, photo: String, email: String, phone: String, nationalCode: String, gender: Gender): User!

  addComment(productId: ID!, content: String!, rating: Int!): Comment!
  updateComment(commentId: ID!, content: String!, rating: Int!): Comment!
  walletDeposit(amount: Int): Wallet
  walletWithdraw(amount: Int): Wallet
  likeComment(commentId: ID!, type: ReactionType!): Reaction

  createOrder(input: CreateOrderInput!): Order!
  addAddress(input: AddAddressInput!): Address!
  applyDiscount(code: String!, totalPrice: Float!): DiscountResponse!
  addCategory(name: String!): Category!
}
