# Enums
enum ProductSortField {
  price
  priceDesc
  discount
  discountDesc
  createdAt
  createdAtDesc
  stock
  stockDesc
}
enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  ONLINE
  ON_DELIVERY
  WALLET
}

enum DiscountType {
  AMOUNT
  PERCENT
}

# Types
type Color {
  name: String!
  hex: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  phone: String
  nationalCode: String
  gender: Gender
  photo: String
  role: Role!
  lastLogin: String
  createdAt: String!
  updatedAt: String!
  addresses: [Address!]!
  orders: [Order!]!
}
enum TransactionType {
  DEPOSIT
  PAYMENT
}
type Product {
  id: ID!
  name: String!
  description: String!
  price: Int!
  discountedPrice: Int
  stock: Int!
  category: Category!
  categoryId: String!
  images: [String!]!
  colors: [Color]
  sizes: [String!]!
  discountCode: String
  discount: Float
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
  orderItems: [OrderItem!]!
}

type Comment {
  id: ID!
  content: String!
  rating: Int!
  product: Product!
  createdAt: String!
}

type Category {
  id: ID!
  name: String!
  products: [Product!]!
}

type Order {
  id: ID!
  user: User
  userId: String!
  items: [OrderItem!]!
  discountCode: DiscountCode
  discountCodeId: String
  address: Address!
  addressId: String!
  deliveryDate: String!
  paymentMethod: PaymentMethod!
  shippingCost: Float!
  tax: Float!
  totalPrice: Float!
  status: OrderStatus!
  createdAt: String!
}

type OrderItem {
  id: ID!
  order: Order!
  orderId: String!
  product: Product!
  productId: String
  color: String
  size: String
  variantId: String
  quantity: Int!
  priceAtPurchase: Float!
}

type DiscountCode {
  id: ID!
  code: String!
  type: DiscountType!
  value: Float!
  isActive: Boolean!
  orders: [Order!]!
}

# Input Types
input ProductFilter {
  minPrice: Int
  maxPrice: Int
  discount: Int
  category: [ID!]
  brand: [ID!]
  colors: [ID!]
  sizes: [String!]
  availableOnly: Boolean
  search: String
  minRating: Float
}

input OrderItemInput {
  productId: ID!
  color: String
  size: String
  quantity: Int!
  priceAtPurchase: Float!
}

input CreateOrderInput {
  items: [OrderItemInput!]!
  addressId: ID!
  discountCode: String
  deliveryDate: String!
  paymentMethod: PaymentMethod!
  shippingCost: Float!
  tax: Float!
  totalPrice: Float!
}

type Transaction {
  id: String!
  walletId: String!
  amount: Float!
  transactionType: TransactionType!
  createdAt: String!
}

type Wallet {
  id: String!
  userId: String!
  balance: Float!
  createdAt: String!
  updatedAt: String!
  transactions: [Transaction!]!
}
type Address {
  id: ID
  userId: String
  province: String
  city: String
  street: String
  alley: String
  plaque: String
  unit: String
  zipCode: String
  createdAt: String
  updatedAt: String
}

input AddAddressInput {
  province: String!
  city: String!
  zipCode: String!
  street: String!
  alley: String
  plaque: String
  unit: String
}
type DiscountResponse {
  success: Boolean!
  message: String!
  discountAmount: Float
  discountPercent: Float
  type: String
  code: String
}
# Queries
type Query {
  products(
    sortBy: ProductSortField
    filters: ProductFilter
    page: Int
    pageSize: Int
  ): [Product!]!

  getMe: User!

  getAllOrders: [Order!]!
  getUserOrders: [Order!]!
  getOrderById(id: String): Order!
  getUserAddress: [Address!]!
  getUserWalletInfo: Wallet!
  getAddressById(id: String): Address
  product(id: ID!): Product

  categories: [Category!]!
}

# Mutations
type Mutation {
  addProduct(
    name: String!
    description: String!
    price: Int!
    stock: Int!
    categoryId: ID!
    images: [String!]!
    colors: [String!]!
    sizes: [String!]!
    discount: Float
    discountCode: String
  ): Product!

  signUp(name: String!, email: String!, password: String!): User!

  signIn(email: String!, password: String!): User!

  signOut: SignOutResponse!

  updateUser(
    id: String!
    name: String
    photo: String
    email: String
    phone: String
    nationalCode: String
    gender: Gender
  ): User!

  addComment(productId: ID!, content: String!, rating: Int!): Comment!
  walletDeposit(amount: Int): Wallet
  walletWithdraw(amount: Int): Wallet

  createOrder(input: CreateOrderInput!): Order!
  addAddress(input: AddAddressInput!): Address!
  applyDiscount(code: String!, totalPrice: Float!): DiscountResponse!
  addCategory(name: String!): Category!
}

# Sign Out Response Type
type SignOutResponse {
  success: Boolean!
}
