generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  phone      String?  @unique
  password   String
  nationalCode String? @unique 
  gender     Gender? 
  photo      String?  
  role       Role     @default(USER)
  lastLogin  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resetToken String?
  resetTokenExpiry DateTime?

  comments   Comment[] 
  addresses  Address[]
  orders     Order[]
  reactions  Reaction[]
  walletId   String?  @unique 
  wallet     Wallet?

  lists      List[]      
}


model Wallet {
  id        String   @id @default(cuid()) 
  user       User     @relation(fields: [userId], references: [id]) 
  userId     String  @unique
  balance   Float    @default(0)  
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  transactions Transaction[]  
}

model Transaction {
  id          String    @id @default(cuid())  
  wallet      Wallet    @relation(fields: [walletId], references: [id])  
  walletId    String    
  amount      Float     
  transactionType TransactionType
  createdAt   DateTime  @default(now()) 
}

enum TransactionType {
  DEPOSIT  
  PAYMENT 
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

model Product {
  id            String    @id @default(uuid())
  name          String  
  description   String   
  brand String @default("Unknown")
  price         Int    
  stock         Int    
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String  
  images        String[] 
  colors        Json
  sizes         String[] 
  discount      Float?    @default(0) 
  discountCode  String? 
  comments      Comment[] 
  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt   
  orderItems    OrderItem[] 
  listProducts    ListProduct[] 
}
model List {
  id        String       @id @default(uuid())
  title     String
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  products  ListProduct[]
  createdAt DateTime     @default(now())
}

model ListProduct {
  id         String   @id @default(uuid())
  list       List     @relation(fields: [listId], references: [id])
  listId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  addedAt    DateTime @default(now())

  @@unique([listId, productId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   
  rating    Int     
  product   Product  @relation(fields: [productId], references: [id]) 
  productId String   
  user   User  @relation(fields: [userId], references: [id]) 
  userId String   
  reactions Reaction[]
  createdAt DateTime @default(now()) 
}

model Reaction {
  id        String   @id @default(uuid())
  type      ReactionType 
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId]) 
}

enum ReactionType {
  LIKE
  DISLIKE
}
model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
}


enum PaymentMethod {
  ONLINE
  ON_DELIVERY
  WALLET
}

enum OrderStatus {
  PROCESSING     
  SHIPPED       
  DELIVERED    
  CANCELED       
}

enum DiscountType {
  AMOUNT
  PERCENT
}

model Address {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  fullName     String              
  phone        String         
  fullAddress  String      
  plaque       String
  unit         String?
  zipCode      String              
  details      String?            
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
}

model DiscountCode {
  id       String   @id @default(cuid())
  code     String   @unique
  type     DiscountType
  value    Float
  isActive Boolean
  orders   Order[]
}

model Order {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  items          OrderItem[]
  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId String?
  address        Address       @relation(fields: [addressId], references: [id])
  addressId      String
  deliveryDate   DateTime
  paymentMethod  PaymentMethod
  shippingCost   Float
  tax            Float
  totalPrice     Float
  status         OrderStatus
  createdAt      DateTime      @default(now())
}

model OrderItem {
  id              String   @id @default(cuid())
  order           Order    @relation(fields: [orderId], references: [id])
  orderId         String

  product         Product  @relation(fields: [productId], references: [id])
  productId       String
  color       String?
  size       String?

  quantity        Int
  priceAtPurchase Float
}
