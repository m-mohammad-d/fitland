generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(uuid())  
  name          String
  email         String   @unique
  phone         String?  @unique
  password      String
  nationalCode  String?  @unique 
  gender        Gender? 
  photo         String?  
  role          Role     @default(USER)
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  addresses Address[]
  orders    Order[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

model Product {
  id            String    @id @default(uuid())
  name          String  
  description   String   
  price         Int    
  stock         Int    
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String  
  images        String[] 
  colors        Json
  sizes         String[] 
  discount      Float?    @default(0) 
  discountCode  String? 
  comments      Comment[] 
  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt   
  orderItems OrderItem[] 
  discountedPrice Int?
}

model Comment {
  id        String   @id @default(uuid())
  content   String   
  rating    Int     
  product   Product  @relation(fields: [productId], references: [id]) 
  productId String   
  createdAt DateTime @default(now()) 
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
}


enum PaymentMethod {
  ONLINE
  CASH
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum DiscountType {
  AMOUNT
  PERCENT
}


model Address {
  id         String   @id @default(cuid()) 
  user       User     @relation(fields: [userId], references: [id]) 
  userId     String  
  province   String   
  city       String   
  street     String 
  alley      String? 
  plaque     String?  
  unit       String?  
  zipCode    String  
  createdAt  DateTime @default(now()) 
  updatedAt  DateTime @updatedAt 
  orders     Order[]  
}

model DiscountCode {
  id       String   @id @default(cuid())
  code     String   @unique
  type     DiscountType
  value    Float
  isActive Boolean
  orders   Order[]
}

model Order {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  items          OrderItem[]
  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId String?
  address        Address       @relation(fields: [addressId], references: [id])
  addressId      String
  deliveryDate   DateTime
  paymentMethod  PaymentMethod
  shippingCost   Float
  tax            Float
  totalPrice     Float
  status         OrderStatus
  createdAt      DateTime      @default(now())
}

model OrderItem {
  id              String   @id @default(cuid())
  order           Order    @relation(fields: [orderId], references: [id])
  orderId         String

  product         Product  @relation(fields: [productId], references: [id])
  productId       String
  variantId       String?

  quantity        Int
  priceAtPurchase Float
}
